"""
Модуль для определения моделей Pydantic, используемых для валидации и сериализации данных.

Этот модуль содержит модели для работы с пользователями и задачами.
Каждая модель описывает структуру данных, которая используется для передачи между клиентом и сервером.
"""

from datetime import datetime
from typing import Optional, List

from pydantic import BaseModel


class TaskBase(BaseModel):
    """
    Базовая модель для задачи.

    Используется для создания и обновления задач.

    Атрибуты:
        title (str): Заголовок задачи.
        description (str): Описание задачи.
        status (str): Статус задачи (по умолчанию "новая").
        priority (str): Приоритет задачи (по умолчанию "средний").
        deadline (Optional[datetime]): Срок выполнения задачи (может быть None).
    """
    title: str
    """Заголовок задачи."""

    description: str
    """Описание задачи."""

    status: str = "новая"
    """Статус задачи (по умолчанию "новая")."""

    priority: str = "средний"
    """Приоритет задачи (по умолчанию "средний")."""

    deadline: Optional[datetime] = None
    """Срок выполнения задачи (может быть None)."""

    class Config:
        """
        Конфигурация модели Pydantic.

        Атрибуты:
            from_attributes (bool): Разрешает загрузку данных из атрибутов объектов.
        """
        from_attributes = True


class TaskCreate(TaskBase):
    """
    Модель для создания новой задачи.

    Наследует все атрибуты от `TaskBase`.
    """
    pass


class Task(TaskBase):
    """
    Модель для представления задачи.

    Используется для сериализации данных задачи.

    Атрибуты:
        id (int): Уникальный идентификатор задачи.
        owner_id (int): Идентификатор пользователя, которому принадлежит задача.
    """
    id: int
    """Уникальный идентификатор задачи."""

    owner_id: int
    """Идентификатор пользователя, которому принадлежит задача."""

    class Config:
        """
        Конфигурация модели Pydantic.

        Атрибуты:
            from_attributes (bool): Разрешает загрузку данных из атрибутов объектов.
        """
        from_attributes = True


class UserBase(BaseModel):
    """
    Базовая модель для пользователя.

    Используется для создания и обновления пользователей.

    Атрибуты:
        username (str): Имя пользователя.
    """
    username: str
    """Имя пользователя."""

    class Config:
        """
        Конфигурация модели Pydantic.

        Атрибуты:
            from_attributes (bool): Разрешает загрузку данных из атрибутов объектов.
        """
        from_attributes = True


class UserCreate(UserBase):
    """
    Модель для создания нового пользователя.

    Наследует все атрибуты от `UserBase` и добавляет поле для пароля.

    Атрибуты:
        password (str): Пароль пользователя.
    """
    password: str
    """Пароль пользователя."""


class User(UserBase):
    """
    Модель для представления пользователя.

    Используется для сериализации данных пользователя.

    Атрибуты:
        id (int): Уникальный идентификатор пользователя.
        tasks (List[Task]): Список задач, принадлежащих пользователю.
    """
    id: int
    """Уникальный идентификатор пользователя."""

    tasks: List[Task] = []
    """Список задач, принадлежащих пользователю."""

    class Config:
        """
        Конфигурация модели Pydantic.

        Атрибуты:
            from_attributes (bool): Разрешает загрузку данных из атрибутов объектов.
        """
        from_attributes = True
